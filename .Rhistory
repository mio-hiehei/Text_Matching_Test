renv::activate()
df <- matrix(data = NA, nrow = 1500, ncol = 3000)
data <- rpois(n = 1500 * 3000, lambda = 3)
hist(data)
data <- rpois(n = 1500 * 3000, lambda = 1)
hist(data)
data <- rpois(n = 1500 * 3000, lambda = 1.5)
hist(data)
table(data)
df <- matrix(data = data, nrow = 1500, ncol = 3000, byrow = TRUE)
View(df)
create_test_data <- function(nrow, ncol, lambda_pois){
data <- rpois(n = nrow * ncol, lambda = lambda_pois)
df <- matrix(data = data, nrow = nrow, ncol = ncol, byrow = TRUE)
return(df)
}
source(create_test_data)
source("create_test_data.R")
dfm <- create_test_data(ncol = 1500, nrow = 750, lambda_pois = 1.5)
dfm <- create_test_data(ncol = 1500, nrow = 750)
source("create_test_data.R")
dfm <- create_test_data(ncol = 1500, nrow = 750)
rm(df, data)
treatment <- rbinom(n = nrow, size = 1, prob = 0.4)
treatment <- rbinom(n = nrow, prob = 0.4)
treatment <- rbinom(n = nrow, size = 1, prob = 0.4)
nrow = 3000
treatment <- rbinom(n = nrow, size = 1, prob = 0.4)
treatment <- rbinom(n = nrow, size = 1, prob = 0.5)
create_test_data <- function(nrow, ncol, lambda_pois= 1.5){
data <- rpois(n = nrow * ncol, lambda = lambda_pois)
df <- matrix(data = data, nrow = nrow, ncol = ncol, byrow = TRUE)
treatment <- rbinom(n = nrow, size = 1, prob = 0.5)
y <- rbinom(n = nrow, size = 1, prob = 0.5)
return(list(df = df,
treatment = treatment,
y = y))
}
dfm <- create_test_data(ncol = 1500, nrow = 750)$df
treatment <- create_test_data(ncol = 1500, nrow = 750)$treatment
y <- create_test_data(ncol = 1500, nrow = 750)$y
rm(nrow)
library(stm)
renv::install("stm")
library(stm)
install.packages("quanteda")
library(stm)
install.packages("dfm")
install.packages("dfm")
renv::install("dfm")
renv::install("stm")
library(stm)
?stem
?stm
# Source: https://github.com/bstewart/textmatching
# (the following are only needed if I am working out of a project)
# setwd("/Users/jrn/desktop")   # Home
# setwd("C:/Users/wmc855/Desktop/Matching_replicated") # Work
load(file="sim.rda")
getwd()
source("functions.R")
data <- create_test_data(ncol = 50, nrow = 100)
dfm <- data$df
treatment <- data$treatment
y <- data$y
vocab <- length(data)
vocab
vocab <- ncol(data)
vocab
data <- create_test_data(ncol = 50, nrow = 100)
dfm <- data$df
treatment <- data$treatment
y <- data$y
vocab <- ncol(dfm)
vocab
gen_random_words <- function(sigma = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u" ,"v", "w", "x","y","z")){
}
igma = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u" ,"v", "w", "x","y","z")
require(truncnorm)
library(truncnorm)
install.packages("truncnorm")
require(truncnorm)
sigma = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u" ,"v", "w", "x","y","z")
runif
sample(sigma, size = 5)
sample(sigma, size = 5, replace = TRUE)
word_vec <- vector()s
gen_random_word <- function(sigma = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u" ,"v", "w", "x","y","z"),
n = 100,
len = 5,
len_type = "fixed"){
if(len_fixed == "fixed"){
word_vec <- vector()
while(length(word_vec) < )
n = 100
len = 5
len_type = "fixed"
word_vec <- paste(sample(sigma, size = 5, replace = TRUE), collapse = TRUE)
word_vec <- paste(sample(sigma, size = 5, replace = TRUE), colapse = TRUE)
word_vec
word_vec <- paste(sample(sigma, size = 5, replace = TRUE), colapse ="")
word_vec
word_vec <- sample(sigma, size = 5, replace = TRUE),
word_vec <- sample(sigma, size = 5, replace = TRUE)
word_vec
min_size = 2
max_size = 10
len <- runif(1, min_size, max_size)
len
len <- round(runif(1, min_size, max_size))
len
len <- round(runif(1, min_size, max_size))
len
len <- round(runif(1, min_size, max_size))
len
temp <-  sample(sigma, size = len, replace = TRUE)
temp <-  paste(sample(sigma, size = len, replace = TRUE), collapse="")
temp
gen_random_word <- function(sigma = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u" ,"v", "w", "x","y","z"),
n = 100,
min_size = 2,
max_size = 10){
word_vec <- vector()
i <- 1
while(length(word_vec) < n){
len <- round(runif(1, min_size, max_size))
temp <-  paste(sample(sigma, size = len, replace = TRUE), collapse="")
if(!(temp %in% word_vec)){
word_vec[i] <- temp
i <- i + 1
} else {
}
}
return(word_vec)
}
gen_random_words <- function(sigma = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u" ,"v", "w", "x","y","z"),
n = 100,
min_size = 2,
max_size = 10){
word_vec <- vector()
i <- 1
while(length(word_vec) < n){
len <- round(runif(1, min_size, max_size))
temp <-  paste(sample(sigma, size = len, replace = TRUE), collapse="")
if(!(temp %in% word_vec)){
word_vec[i] <- temp
i <- i + 1
} else {
}
}
return(word_vec)
}
vocab <- get_rand_words()
gen_random_words <- function(sigma = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u" ,"v", "w", "x","y","z"),
n = 100,
min_size = 2,
max_size = 10){
word_vec <- vector()
i <- 1
while(length(word_vec) < n){
len <- round(runif(1, min_size, max_size))
temp <-  paste(sample(sigma, size = len, replace = TRUE), collapse="")
if(!(temp %in% word_vec)){
word_vec[i] <- temp
i <- i + 1
} else {
}
}
return(word_vec)
}
vocab <- gen_rand_words()
gen_random_words <- function(sigma = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u" ,"v", "w", "x","y","z"),
n = 100,
min_size = 2,
max_size = 10){
word_vec <- vector()
i <- 1
while(length(word_vec) < n){
len <- round(runif(1, min_size, max_size))
temp <-  paste(sample(sigma, size = len, replace = TRUE), collapse="")
if(!(temp %in% word_vec)){
word_vec[i] <- temp
i <- i + 1
} else {
}
}
return(word_vec)
}
vocab <- gen_random_words()
vocab
vocab <- gen_random_words(n = ncol(dfm))
vocab
?stm
t0 <- Sys.time()
stm.out.c <- stm(documents = dfm, vocab = vocab, K=K, prevalence=~
treatment, content=~treatment,
max.em.its=100,
seed=1033311)
library(stm)
stm.out.c <- stm(documents = dfm, vocab = vocab, K=K, prevalence=~
treatment, content=~treatment,
max.em.its=100,
seed=1033311)
data <- create_test_data(ncol = 50, nrow = 100)
dfm <- data$df
treatment <- data$treatment
y <- data$y
vocab <- gen_random_words(n = ncol(dfm))
install.packages("quanteda")
library(quanteda)
dfm <- as.dfm(data$df)
?as.dfm
colnames(dfm)  <- vocab
dfm <- as.dfm(data$df)
?as.dfm
?stm
View(dfm)
colnames(dfm)  <- vocab
dfm <- as.dfm(data$df)
dfm <- matrix2dfm(data$df)
dfm <- matrix2dfm(data$df)
library(Matrix)
dfm <- sparseMatrix(data$df)
i<−c(1,3,8,4,2,7,6,9,1,4,10);j<−c(2,5,3,2,4,2,4,5,2,7,3);x<−rpois(11,2)
i<−c(1,3,8,4,2,7,6,9,1,4,10)
i<−c(1,3,8,4,2,7,6,9,1,4,10)
i <− c(1,3,8,4,2,7,6,9,1,4,10)
i<- c(1,5,2,4,2,2,8)
j <- c(2,5,3,2,4,2,4)
x <- rpois(7,2)
M1 <- sparseMatrix(i,j,x=x)
M1
x
i
j
?sparseMatrix
x = 1:100
y = log(x)
plot(x,y)
e^1
e
e <- 2.71828
e ^ 1
1 ^e
2^e
y
e ^0
e ^ 0.69
e ^ 2
4
sqrt(4)
8
sqrt(16)
1 ^ - 16
