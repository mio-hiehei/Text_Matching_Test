x_matched = x_matched,
y = y)
matched_x <- gen_stm_data(k = k, nrow = nrow(dfm))
x_2bm <- gen_stm_data(k = k, nrow = nrow(dfm))
df_2bm <- cbind.data.frame(teatment = treatment,
x_2bm = x_2bm,
y = y)
teatment
df_2bm <- cbind.data.frame(treatment = treatment,
x_2bm = x_2bm,
y = y)
treatment
x_2bm
x_2bm <- gen_stm_data(k = k, nrow = nrow(dfm))
gen_stm_data <- function(k, nrow){
k <- 15
nrow <- 100
matched_x <- matrix(ncol = k, nrow = nrow, NA)
for(row in 1:nrow(matched_x)){
leftover <- 101
for(col in 1:ncol(matched_x)){
if (col == 1){
matched_x[row, col] <- floor(runif(1,0,leftover))
} else {
matched_x[row, col] <- floor(runif(1,0, leftover))
}
leftover <- leftover - matched_x[row,col]
}
# random order
matched_x[row, ] <- sample(x = matched_x[row, ], size = k)
#     cat(matched_x[row, ], "   ", sum(matched_x[row, ]),  "\n")
}
return(matched_x)
}
x_2bm <- gen_stm_data(k = k, nrow = nrow(dfm))
x_2bm
df_2bm <- cbind.data.frame(treatment = treatment,
x_2bm = x_2bm,
y = y)
View(df_2bm)
logit_fun <- function(y, X, theta){
## This is a logit function to be optimised with optim-function.
### Input: dependent variable vector y, independent variable matrix X. theta will be optimised and does not require
### an input.
### Output: summed maximum logged likelihood of function with given parameter values as a scalar.
# if there are >= 2 independent variables:
if(!is.null(ncol(X))){
beta <- theta[1:ncol(X)]
mu <- X %*% beta
# if there is just one:
} else {
beta <- theta[1]
mu <- X * beta
}
# caluclating probabilities
p <- 1 / ( 1 + exp(-mu) )
# summing logged likelihood
logll <-  sum( y * log(p) + (1 - y) * log ( 1- p) )
# return sum loglik value
return(logll)
}
est_prop_score <- function(X, t){
startvals <- rep(0, ncol(X))
res <- optim(
par = startvals, # start values
fn = logit_fun, # function to optimise: the function argument not stated below (theta) will be optimised.
y = t, # y is our dv
X = X, # X are our ivs
control = list(fnscale = -1), # a negative value in fnscale will lead to a maximisation of the function, rather than a minimmisation.
hessian = FALSE, # do not include hessian matrix of 2nd derivatives. What be necessary if we calculated se by hand.
method = "BFGS" # which hill-climbing algorithm to use.
)
# at which values for theta did the optim() function reach its maximum? Those are the coefficients.
coef <- res$par
odds <- exp(coef)
prob <- odds / (1 + odds)
return(prob)
}
logit_fun <- function(y, X, theta){
## This is a logit function to be optimised with optim-function.
### Input: dependent variable vector y, independent variable matrix X. theta will be optimised and does not require
### an input.
### Output: summed maximum logged likelihood of function with given parameter values as a scalar.
# if there are >= 2 independent variables:
if(!is.null(ncol(X))){
beta <- theta[1:ncol(X)]
mu <- X %*% beta
# if there is just one:
} else {
beta <- theta[1]
mu <- X * beta
}
# caluclating probabilities
p <- 1 / ( 1 + exp(-mu) )
# summing logged likelihood
logll <-  sum( y * log(p) + (1 - y) * log ( 1- p) )
# return sum loglik value
return(logll)
}
nsim = 1000
X
est_prop_score <- function(X, t, nsim = 1000){
require(optimx)
require(MASS)
startvals <- rep(0, ncol(X))
res <- optim(
par = startvals, # start values
fn = logit_fun, # function to optimise: the function argument not stated below (theta) will be optimised.
y = t, # y is our dv
X = X, # X are our ivs
control = list(fnscale = -1), # a negative value in fnscale will lead to a maximisation of the function, rather than a minimmisation.
hessian = TRUE, # do not include hessian matrix of 2nd derivatives. What be necessary if we calculated se by hand.
method = "BFGS" # which hill-climbing algorithm to use.
)
# at which values for theta did the optim() function reach its maximum? Those are the coefficients.
coef <- res$par
vcov <- solve(-res$hessian)
se <- sqrt(diag(vcov))
nsim <- nsim
S <- mvrnorm(nsim, coef, vcov)
mu <- S %*% X
1 / ( 1 + exp(-mu) )
return(prob)
}
est_prop_score <- function(X, t, nsim = 1000){
require(optimx)
require(MASS)
startvals <- rep(0, ncol(X))
res <- optim(
par = startvals, # start values
fn = logit_fun, # function to optimise: the function argument not stated below (theta) will be optimised.
y = t, # y is our dv
X = X, # X are our ivs
control = list(fnscale = -1), # a negative value in fnscale will lead to a maximisation of the function, rather than a minimmisation.
hessian = TRUE, # do not include hessian matrix of 2nd derivatives. What be necessary if we calculated se by hand.
method = "BFGS" # which hill-climbing algorithm to use.
)
# at which values for theta did the optim() function reach its maximum? Those are the coefficients.
coef <- res$par
vcov <- solve(-res$hessian)
se <- sqrt(diag(vcov))
nsim <- nsim
S <- mvrnorm(nsim, coef, vcov)
mu <- S %*% X
prob <- 1 / ( 1 + exp(-mu) )
return(prob)
}
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
X = x_2bm
t = treatment
startvals <- rep(0, ncol(X))
res <- optim(
par = startvals, # start values
fn = logit_fun, # function to optimise: the function argument not stated below (theta) will be optimised.
y = t, # y is our dv
X = X, # X are our ivs
control = list(fnscale = -1), # a negative value in fnscale will lead to a maximisation of the function, rather than a minimmisation.
hessian = TRUE, # do not include hessian matrix of 2nd derivatives. What be necessary if we calculated se by hand.
method = "BFGS" # which hill-climbing algorithm to use.
)
res
# at which values for theta did the optim() function reach its maximum? Those are the coefficients.
coef <- res$par
coef
vcov <- solve(-res$hessian)
se <- sqrt(diag(vcov))
S <- mvrnorm(nsim, coef, vcov)
mu <- S %*% X
mu <- S %*% as.matrix(X)
S
type(S)
is.matrix(S)
is.matrix(X)
dim(S)
dim(X)
mu <- S %*% t(X)
mu
prob <- 1 / ( 1 + exp(-mu) )
prob
dim(mu)
prob <- 1 / ( 1 + exp(-mu) )
dim(prob)
prop_score <- apply(prob, 1, mean)
prop_score <- apply(prob, 2, mean)
est_prop_score <- function(X, t, nsim = 1000){
require(optimx)
require(MASS)
startvals <- rep(0, ncol(X))
res <- optim(
par = startvals, # start values
fn = logit_fun, # function to optimise: the function argument not stated below (theta) will be optimised.
y = t, # y is our dv
X = X, # X are our ivs
control = list(fnscale = -1), # a negative value in fnscale will lead to a maximisation of the function, rather than a minimmisation.
hessian = TRUE, # do not include hessian matrix of 2nd derivatives. What be necessary if we calculated se by hand.
method = "BFGS" # which hill-climbing algorithm to use.
)
# at which values for theta did the optim() function reach its maximum? Those are the coefficients.
coef <- res$par
vcov <- solve(-res$hessian)
se <- sqrt(diag(vcov))
nsim <- nsim
S <- mvrnorm(nsim, coef, vcov)
mu <- S %*% t(X)
prob <- 1 / ( 1 + exp(-mu) )
prop_score <- apply(prob, 2, mean)
return(prop_score)
}
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
prob_score
prob_score[treatment == 1]
prob_score_control <- prob_score[treatment == 0]
prob_score_control
index <- 1:nrow(dfm)
mat <- cbind(index, prob_score, treatment)
mat
mat["treatment", i]
i <- 1
at["treatment", i]
mat["treatment", i]
mat
mat[i, "treatment"]
which(mat[, "treatment"] == 0 )
ind_control <- which(mat[, "treatment"] == 0)
ind_control
mat[ind_control, "prob_score"]
mat[ind_control, "prob_score"]
mat[i, "prob_score"]
abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"])
min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
which(mat[ind_control, "prob_score"] == min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
}
which(mat[ind_control, "prob_score"] == min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"])))
mat[ind_control, "prob_score"]
min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"])
min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
mat[ind_control, "prob_score"]
abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"])
which(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"])))
which(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"])
which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
index <- 1:nrow(dfm)
mat <- cbind(index, prob_score, treatment)
ind_control <- which(mat[, "treatment"] == 0)
matched_control <- vector()
for(i in 1:index){
if (mat[i, "treatment"] == 1){
matched_cntrol[i] <- which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
}
}
maetched_control
matched_control
which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
index <- 1:nrow(dfm)
mat <- cbind(index, prob_score, treatment)
ind_control <- which(mat[, "treatment"] == 0)
matched_control <- vector()
for(i in 1:index){
if (mat[i, "treatment"] == 1){
matched_control[i] <- which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
}
}
matched_control
for(i in 1:index){
if (mat[i, "treatment"] == 1){
matched_control[i] <- which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
cat(matched_conntrol[i])
}
}
which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
i <- 2
index
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
mat <- cbind(index, prob_score, treatment)
ind_control <- which(mat[, "treatment"] == 0)
matched_control <- vector()
for(i in 1:nrow(mat)){
if (mat[i, "treatment"] == 1){
matched_control[i] <- which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
cat(matched_conntrol[i])
}
}
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
mat <- cbind(index, prob_score, treatment)
ind_control <- which(mat[, "treatment"] == 0)
matched_control <- vector()
for(i in 1:nrow(mat)){
if (mat[i, "treatment"] == 1){
matched_control[i] <- which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
cat(matched_control[i])
}
}
matched_control
matched_control <- vector()
for(i in 1:nrow(mat)){
if (mat[i, "treatment"] == 1){
matched_control[i] <- which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
cat(matched_control[i])
} else {
matched_control[i] <- NA
}
}
matched_control
matched_control <- vector()
for(i in 1:nrow(mat)){
if (mat[i, "treatment"] == 1){
matched_control[i] <- which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
} else {
matched_control[i] <- NA
}
cat(matched_control[i])
}
matched_control
table(matched_control)
table(matched_control, useNA = "ifany")
table(treatment)
table(matched_control, useNA = "ifany")
matched_control
mat <- cbind(index, prob_score, treatment, y)
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
mat <- cbind(index, prob_score, treatment, y)
ind_control <- which(mat[, "treatment"] == 0)
matched_control <- vector()
for(i in 1:nrow(mat)){
if (mat[i, "treatment"] == 1){
matched_control[i] <- which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
} else {
matched_control[i] <- NA
}
cat(matched_control[i])
}
matched_control[!(is.na(matched_control]))]
is.na(matched_control)
matched_control[!(is.na(matched_control))]
unique(matched_control[!(is.na(matched_control))])
length(unique(matched_control[!(is.na(matched_control))]))
matched_control[!(is.na(matched_control))])
matched_control[!(is.na(matched_control))]
foundmatch_control <- matched_control[!(is.na(matched_control))]
which(mat[, "treatment" == 1])
which(mat[, "treatment" ] == 1)
c(which(mat[, "treatment" ] == 1), foundmatch_control)
mat[c(1,1), ]
matched_df <- mat[c(which(mat[, "treatment" ] == 1), foundmatch_control),]
nrow(matched_df) == 2*nrow(mat[which(mat[, "treatment" ] == 1), ])
mean(y)
mat[which(mat["treatment",] == 1), "y"]
mean(mat[which(mat[,"treatment"] == 1), "y"])
View(matched_df)
mean(matched_df[which(matched_df[,"treatment"] == 1), "y"])
mean(matched_df[which(matched_df[,"treatment"] == 0), "y"])
mean(matched_df[which(matched_df[,"treatment"] == 1), "y"])
mean(matched_df[which(matched_df[,"treatment"] == 0), "y"])
yt <- mean(matched_df[which(matched_df[,"treatment"] == 1), "y"])
yc <- mean(matched_df[which(matched_df[,"treatment"] == 0), "y"])
yt - yc
## Robustness:
### how many C are used?
length(unique(foundmatch_control)) / length(mat[, "treatment"] == 0)
length(mat[, "treatment"] == 0)
nrow(mat[, "treatment"] == 0)
mat[, "treatment"]
mat[, "treatment"] == 0
nrow(mat[which(mat[,"treatment"] == 0)]
=
row(mat[which(mat[,"treatment"] == 0)])
nrow(mat[which(mat[,"treatment"] == 0)])
which(mat[,"treatment"] == 0)
mat[which(mat[,"treatment"] == 0),]
nrow(mat[which(mat[,"treatment"] == 0),])
## Robustness:
### how many C are used?
length(unique(foundmatch_control)) / nrow(mat[which(mat[,"treatment"] == 0),])
matched_df[which(matched_df[,"treatment"] == 0), "prob_score"]
which(matched_df[,"treatment"] == 0)
colnames(matched_df)
table(matched_df[,"treatment"])
matched_control[!(is.na(matched_control))]
which(mat[, "treatment" ] == 1
which(mat[, "treatment" ] == 1)
which(mat[, "treatment" ] == 1)
length(foundmatch_control)
length(foundmatch_control) == length(which(mat[, "treatment" ] == 1))
c(which(mat[, "treatment" ] == 1), foundmatch_control)
mat[c(which(mat[, "treatment" ] == 1), foundmatch_control),]
matched_control[!(is.na(matched_control))]
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
mat <- cbind(index, prob_score, treatment, y)
source("functions.R")
data <- create_test_data(ncol = 50, nrow = 100)
dfm <- data$df
vocab <- gen_random_words(n = ncol(dfm))
colnames(dfm)  <- vocab
treatment <- data$treatment
y <- data$y
k <- 15
x_2bm <- gen_stm_data(k = k, nrow = nrow(dfm))
data <- create_test_data(ncol = 2400, nrow = 10000)
k <- 15
x_2bm <- gen_stm_data(k = k, nrow = nrow(dfm))
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
prob_score
data <- create_test_data(ncol = 400, nrow = 100)
dfm <- data$df
vocab <- gen_random_words(n = ncol(dfm))
colnames(dfm)  <- vocab
treatment <- data$treatment
y <- data$y
k <- 15
x_2bm <- gen_stm_data(k = k, nrow = nrow(dfm))
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
mat <- cbind(index, prob_score, treatment, y)
mat <- cbind(prob_score, treatment, y)
ind_control <- which(mat[, "treatment"] == 0)
ind_control
mat
table(mat$treatment)
table(mat[,3])
ind_control <- which(mat[, "treatment"] == 0)
matched_control <- vector()
i <- 1
which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
mat[i, "treatment"]
matched_control[i] <- NA
cat(matched_control[i])
i <- i + 1
i
mat[i, "treatment"] == 1
matched_control[i] <- NA
i <- i + 1
mat[i, "treatment"] == 1
ind_control
matched_control[i] <- NA
i <- i + 1
i
mat[i, "treatment"] == 1
mat[ind_control, "prob_score"]
mat[ind_control, "prob_score"] - mat[i, "prob_score"]
abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"])
sort(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
mat[ind_control, "prob_score"] - mat[i, "prob_score"])
mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
mat[ind_control, "prob_score"] - mat[i, "prob_score"]
mat[ind_control, "prob_score"] - mat[i, "prob_score"])
mat[ind_control, "prob_score"] - mat[i, "prob_score"]
ind_control
ind_control[which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))]
mat[ind_control[which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))],"prob_score"]
mat[ind_control[which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))],]
matched_control[i] <- ind_control[which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))]
ind_control
ind_control[which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))]
mat[ind_control[which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))],]
prob_score <-  est_prop_score(X=x_2bm, t=treatment, nsim = 1000)
mat <- cbind(prob_score, treatment, y)
mat
ind_control <- which(mat[, "treatment"] == 0)
ind_control
matched_control <- vector()
i
mat[ind_control[which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))],]
matched_control
ind_control
mat[i, "treatment"]
mat[i,]
mat[34,]
ind_control
mat[ind_control,]
mat[ind_control, "prob_score"]
mean(mat[ind_control, "prob_score"])
at[ind_control, "prob_score"] - mat[i, "prob_score"]
mat[ind_control, "prob_score"] - mat[i, "prob_score"]
abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"])
which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))
mat[ind_control[which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))],]
mat[i, "prob_score"]
mat[ind_control[which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))],"prob_score"]
while(i <= nrow(mat)){
if (mat[i, "treatment"] == 1){
matched_control[i] <- mat[ind_control[which.min(abs(mat[ind_control, "prob_score"] - mat[i, "prob_score"]))],"prob_score"]
} else {
matched_control[i] <- NA
}
cat(matched_control[i])
i <- i + 1
}
foundmatch_control <- matched_control[!(is.na(matched_control))]
foundmatch_control
length(foundmatch_control) == length(which(mat[, "treatment" ] == 1))
mat[c(which(mat[, "treatment" ] == 1), foundmatch_control),]
matched_df <- mat[c(which(mat[, "treatment" ] == 1), foundmatch_control),]
yt <- mean(matched_df[which(matched_df[,"treatment"] == 1), "y"])
yc <- mean(matched_df[which(matched_df[,"treatment"] == 0), "y"])
table(matched_df[,"treatment"])
View(matched_df)
foundmatch_control
foundmatch_control
matched_control
!(is.na(matched_control))
which(!(is.na(matched_control)))
foudmatch_control_index <- which(!(is.na(matched_control)))
foudmatch_control_index
all(foundmatch_control_index %in% ind_control)
foundmatch_control_index <- which(!(is.na(matched_control)))
all(foundmatch_control_index %in% ind_control)
foundmatch_control_index
ind_control
